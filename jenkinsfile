//start of the Jenkinsfile

pipeline {
    
    // Agent Any means : this pipeline can be used for any Jenkins 

agent
    agent any


    environemnt {

        // environment attribute holds the environemnt variables which can be used in all the stages.

        NEW_BUILD_VERSION = '1.2.345'
    }


    tools{
        //Mention the tools to be used in your build. 
        //Tools needs to pre-configured in Jenkins in "Global Tool Configuaraitons". 
        //this is Not a mandatory attribute.

        maven
    }


    //Scripts to be used for every stages of a pipeline
    stages {
        
        //define the stages one by one. a pipelinbe can have as many as stages you want.

        stage("build") { 
            //When Expression : is used to execute steps based on some logic.
            when {
                expression {
                    // execute below mentioned steps only when a Branch Name is 'dev' and if there was any code change in this branch 

                    BRANCH_NAME == 'DEVELOPMENT' || BRANCH_NAME == 'main' && CODE_CHANGES == true

                }
            }


            //steps will have all the scripts needed for the deployment e.g. npm code

            steps { 
                sh 'npm install'
                sh 'npm build'
                echo 'I am building my application.'
            }
        }
        stage("test") {
            steps {
                //using an environmental variable in the script. Note the use of "$" and "{}"

                echo "Now Building the version ${NEW_BUILD_VERSION}" 
                echo 'Now testing the new application...' 
            }
        }
        stage("deploy") {
            steps {
                echo 'deplying the application...' 
                echo "Now deploying the applicaiton version"
                }
            }


    }


    //Post Expression : execute some logics after all of the stages are executed.
    //Can be used to email build results to the developers.

    post {
        
        always {
            // execute logics after execution, build status does not matter.
        }
        success {
            // execute logics after execution, only after a SUCCESSFUL build. 
        }
        failure {
            // execute logics after execution, only after a build FAILS. 
        }
    }
} 